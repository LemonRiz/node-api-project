import { Task } from "../models/task.js";
import { Op } from "sequelize";

export const addTasks = async (req, res) => {
  try {
    // TRY AND CREATE A TASK
    const task = await Task.create(req.body);
    // RETURN THE AUTOGENERATED ID FROM THE DB
    res.status(201).send({ data: `Task ID: ${task.id} created` });
  } catch (error) {
    // IF THERE IS AN ERROR WE WILL SEND BACK THE MESSAGE
    res.status(403).send(error.message);
  }
};

export const singleTask = async (req, res) => {
  const id = parseInt(req.params.id);
  try {
    const task = await Task.findByPk(id);
    if (!task) {
      res.status(404).send("Not Found");
    } else {
      res.status(200).send(task);
    }
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const getTasks = async (req, res) => {
  const { chore, created_by, priority, id } = req.query;
  const query = {
    where: {},
    order: [],
  };
  if (chore) {
    query.where.chore = { [Op.like]: `%${chore}%` };
  }
  if (created_by) {
    query.where.created_by = { [Op.like]: `%${created_by}%` };
  }
  // if (id) {
  //   query.where.id = { [Op.eq]: `${id}` };
  // }
  if (priority == "asc") {
    query.order[0] = ["priority", "ASC"];
  } else if (priority == "desc") {
    query.order[0] = ["priority", "DESC"];
  } else if (priority) {
    query.where.priority = { [Op.eq]: priority };
  }

  try {
    const tasks = await Task.findAll(query);
    res.status(200).send(tasks);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const updateTaskById = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const task = await Task.update(req.body, {
      where: {
        id: id,
      },
    });

    if (task[0] === 0) {
      throw new Error("Task not Found");
    }

    res.send("Task updated");
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const deleteTask = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const task = await Task.destroy({
      where: {
        id: id,
      },
    });

    if (!task) {
      throw new Error("Task not Found");
    }
    res.status(204);
    res.send("Task removed");
  } catch (error) {
    res.status(404).send(error.message);
  }
};
